import pandas as pd
from datamuse import datamuse
import json

api = datamuse.Datamuse()

# reading the categories into "categories"
def getCategories():
    with open ('../misc/categories.txt', 'r') as f:
        categories = f.read().split()
    return categories

# read categories synonyms into "categoriesRaw"
# @param String category - the category to search the json file for
def getCategorySynonyms(category):
    with open('../misc/categories.json', 'r') as f:
        categoriesRaw = json.load(f)
    # assuring that the passed category is an actual category
    try:
        return categoriesRaw[category]
    except:
        return [category]

# takes a word, and returns an array of similar words
# @pram String word - the value to search the API for
def getWordsFromAPI(word):
    wordDict = api.words(ml = word)
    wordArray = [word]
    count = 0
    for x in wordDict:
        if (count > 20):
            break
        wordArray.append(x['word'])
        count += 1
    return wordArray

# takes a phrase (String with spaces) and calls getWordsFromAPI
# to get all related words
# @param String phrase - a purpose phrase from database
def generateRelatedWords(phrase):
    phrase = phrase.lower()
    totalRelatedWords = []
    subWords = phrase.split()
    for w in subWords:
        totalRelatedWords.append(w.lower())
        totalRelatedWords.extend(getWordsFromAPI(w))
    return set(totalRelatedWords)

# gets a list of all related category words
# @param String category - the final category
# @param boolean include_synonyms - whether to include synonyms of the category generated by the json file
def getRelatedCategoryWords(category, include_synonyms = False):
    totalRelatedWords = []
    # seedWords are all words that are synonyms of the category
    seedWords = []
    # calling the earlier function to determine the seed words
    if (include_synonyms):
        seedWords = getCategorySynonyms(category)
    else:
        seedWords.append(category)

    # iterate through the seed words and fill list of related words
    # using the getWordsFromAPI function

    for word in seedWords:
        totalRelatedWords.extend(getWordsFromAPI(word))

    return set(totalRelatedWords)

# takes two arrays and calculates the number of similar words
# @param String[] wordArray1 - an array of words
# @param String[] wordArray2 - another array of words
def scoreSimilarity(wordArray1, wordArray2):
    similar = 0
    for word in wordArray1:
        if (word in wordArray2):
            similar += 1
    return (round(similar / len(wordArray1), 3))